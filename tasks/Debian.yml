---

- name: Update APT cache
  apt: 
    update_cache: true 
    cache_valid_time: "{{ 0 if config_updated is defined and config_updated.changed else patching_repo_cache_valid_time }}"

- name: Update APT packages
  apt:
    state: latest
    upgrade: "no"
  when: patching_upgrade_all != True

- name: Upgrade APT packages
  apt:
    upgrade: "dist"
  when: patching_upgrade_all

- name: Generate list of installed and updated packages
  shell: grep -E "^$(date +%Y-%m-%d).+ (install|upgrade) " /var/log/dpkg.log | cut -d " " -f 3-5
  changed_when: false
  register: result

- name: List installed and updated packages
  debug: msg="{{ result.stdout_lines }}"

- name: Clean APT cache
  apt:    
    autoclean: yes 
  when: patching_repo_clean

- name: Remove APT packages and files
  apt:
    autoremove: yes
    purge: yes
  when: patching_repo_clean

- name: Generate list of removed packages
  shell: grep -E "^$(date +%Y-%m-%d).+ (remove) " /var/log/dpkg.log | cut -d " " -f 3-5
  changed_when: false
  register: result

- name: List removed packages
  debug: msg="{{ result.stdout_lines }}"

- name: Check if reboot is required
  stat:
    path: /var/run/reboot-required
  register: reboot_required
  when: patching_reboot_server

- name: Restart server
  shell: sleep 1 && shutdown -r now "Reboot triggered by Ansible" && sleep 1
  async: 1
  poll: 0
  ignore_errors: True
  become: yes
  when: 
    - patching_reboot_server
    - reboot_required.stat.exists == true

- name: Wait for Reboot
  wait_for_connection:
    timeout: 6000
    delay: 20
  when: 
    - patching_reboot_server
    - reboot_required.stat.exists == true
